programa Inverso
// Entrada:     Una lista de enteros positivos terminada con un 0000 hexadecimal
// Output:      La lista de enteros en orden inverso.
// Comentarios: Los datos son almacenados desde la ubicación 30 de la memoria.
// -----------------------------------------------------------------------------
10: 7101   R[1] <- 0001                  R[1] siempre es 1
11: 7A30   R[A] <- 0030                  dirección de memoria del arreglo a[]
12: 7B00   R[B] <- 0000                  # n: número de elementos en el arreglo

// lee la secuencia de enteros positivos
                                         Mientras Verdadero:
13: 8CFF   read R[C]                        Leer c
14: CC19   if (R[C] == 0) goto 19           Si (c == 0): Detener ciclo
15: 16AB   R[6] <- R[A] + R[B]              a + n   # ubicación en memoria 
16: BC06   mem[R[6]] <- R[C]                a[n] = c
17: 1BB1   R[B] <- R[B] + R[1]              n = n + 1
18: C013   goto 13                       

// imprimir numeros en orden inverso
19: CB20   if (R[B] == 0) goto 20        Mientras n != 0:
1A: 16AB   R[6] <- R[A] + R[B]              a + n # ubicación en memoria
1B: 2661   R[6] <- R[6] - R[1]              a + n - 1
1C: AC06   R[C] <- mem[R[6]]                c = a[n-1]
1D: 9CFF   write R[C]                       Imprimir c
1E: 2BB1   R[B] <- R[B] - R[1]              n = n - 1
1F: C019   goto 19                       
20: 0000   halt  
